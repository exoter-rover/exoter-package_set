## Define here packages that are not dependent on oroGen
cmake_package 'drivers/gnss_trimble' #GNSS driver
cmake_package 'exoter/exoter_kinematics' #Dedicated ExoTer Kinematics library
cmake_package 'exoter/exoter_dynamics' #Dedicated ExoTer Dynamics library
cmake_package 'control/locomotion_control' #This library is an specialization of generic_rover_manoeuvre
cmake_package 'drivers/platform_driver' #Elmo driver
cmake_package 'control/generic_rover_manoeuvre' #Generic rover manoeuvre to map 2D motion commands to required joint commands
cmake_package 'drivers/ar_tracking' #Advanced Realtime Tracking System
cmake_package 'drivers/telemetry_telecommand' #Dedicated ExoTer Data Handling library to talk to RAT GCS

## Pangolin gui 
cmake_package 'gui/pangolin'

cmake_package 'slam/dso' do |pkg|
    pkg.define 'DSO_BUILD_STATIC_LIBRARY','OFF'
end

## ESA-NPI localization
cmake_package 'slam/localization' #Localization library

## GPs odometry residual error
cmake_package 'slam/gp_odometry' do |pkg| #GP odometry
    def pkg.install
        super
        # install python sc
        gp_odometry_install = File.join(prefix, "share", "gp_odometry")
        FileUtils.mkdir_p gp_odometry_install
        FileUtils.install(File.join(srcdir, "scripts", "methods.py"), File.join(gp_odometry_install, "methods.py"))
    end
end

## ORB_SLAM2 library
import_package 'slam/orb_slam2' do |pkg| #ORB SLAM2
    pkg.depends_on 'gui/pangolin'

    def pkg.buildstamp; "autobuild-stamp" end

    def pkg.prepare
        super
        isolate_errors do
            build
            progress_done
        end
    end

    def pkg.build
    end

    def pkg.install
        super
        in_dir (srcdir) do
            # Compilation using the dedicated shell script
            run("build", "./build.sh")
        end

        # cmake provided by ORB_SLAM2 does not have install. In order to avoid patches Autoproj handles the installation.
        install_prefix = File.join(prefix, "include", name.split('/')[1])
        FileUtils.mkdir_p install_prefix
        files = Dir.glob(File.join(srcdir, "include", "*.h")).sort
        FileUtils.install(files, File.join(install_prefix))

        # g2o includes
        #install_g2o_prefix = File.join(install_prefix, "Thirdparty", "g2o")
        #FileUtils.mkdir_p install_g2o_prefix
        #files = Dir.glob(File.join(srcdir, "Thirdparty", "g2o", "*.h")).sort
        #FileUtils.install(files, File.join(install_g2o_prefix))

        #files = Dir.glob(File.join(srcdir, "Thirdparty", "g2o", "g2o", "core", "*.h*")).sort
        #FileUtils.mkdir_p File.join(install_g2o_prefix, "g2o", "core")
        #FileUtils.install(files, File.join(install_g2o_prefix, "g2o", "core"))

        #files = Dir.glob(File.join(srcdir, "Thirdparty", "g2o", "g2o", "solvers", "*.h")).sort
        #FileUtils.mkdir_p File.join(install_g2o_prefix, "g2o", "solvers")
        #FileUtils.install(files, File.join(install_g2o_prefix, "g2o", "solvers"))

        #files = Dir.glob(File.join(srcdir, "Thirdparty", "g2o", "g2o", "stuff", "*.h")).sort
        #FileUtils.mkdir_p File.join(install_g2o_prefix, "g2o", "stuff")
        #FileUtils.install(files, File.join(install_g2o_prefix, "g2o", "stuff"))

        #files = Dir.glob(File.join(srcdir, "Thirdparty", "g2o", "g2o", "types", "*.h*")).sort
        #FileUtils.mkdir_p File.join(install_g2o_prefix, "g2o", "types")
        #FileUtils.install(files, File.join(install_g2o_prefix, "g2o", "types"))

        # DBoW2 includes
        install_dbow2_prefix = File.join(install_prefix, "Thirdparty", "DBoW2")
        files = Dir.glob(File.join(srcdir, "Thirdparty", "DBoW2", "DBoW2", "*.h")).sort
        FileUtils.mkdir_p File.join(install_dbow2_prefix, "DBoW2")
        FileUtils.install(files, File.join(install_dbow2_prefix, "DBoW2"))

        files = Dir.glob(File.join(srcdir, "Thirdparty", "DBoW2", "DUtils", "*.h")).sort
        FileUtils.mkdir_p File.join(install_dbow2_prefix, "DUtils")
        FileUtils.install(files, File.join(install_dbow2_prefix, "DUtils"))

        # Install the libraries
        lib_prefix = File.join(prefix, "lib")
        FileUtils.mkdir_p lib_prefix
        FileUtils.install(File.join(srcdir, "lib", "libORB_SLAM2.so"), File.join(lib_prefix, "libORB_SLAM2.so"))
        #FileUtils.install(File.join(srcdir, "Thirdparty/g2o/lib/", "libg2o.so"), File.join(lib_prefix, "libg2o.so"))
        FileUtils.install(File.join(srcdir, "Thirdparty/DBoW2/lib/", "libDBoW2.so"), File.join(lib_prefix, "libDBoW2.so"))

        # Install the pkgconfig (this can also be done at cmake level)
        pkgconfig_prefix = File.join(lib_prefix, "pkgconfig")
        FileUtils.mkdir_p pkgconfig_prefix
        FileUtils.install(File.join(srcdir, "build", "ORB_SLAM2.pc"), File.join(pkgconfig_prefix, "ORB_SLAM2.pc"))

        # Install ORB vocabulary for DBoW2
        orb_vocabulary_prefix = File.join(prefix, "share", "orb_slam2")
        FileUtils.mkdir_p orb_vocabulary_prefix
        FileUtils.install(File.join(srcdir, "Vocabulary", "ORBvoc.txt"), File.join(orb_vocabulary_prefix, "ORBvoc.txt"))

    end
end

cmake_package 'perception/cpu_tsdf' #TSDF in CPU
cmake_package 'slam/envire_sam' #Envire wrapper for the Georgia Tech Smooth and Mapping

#if !has_pcan_api? # defined in init.rb
#    Autoproj.manifest.add_exclusion "control/platform_driver", "Peak PCI Express Mini needed for platform_driver is not installed!. Install it manually: http://www.peak-system.com/fileadmin/media/linux/index.htm"
#end

# Kernel driver for RTD PCIE UARTs
import_package 'drivers/exar_pcie_uart' do |pkg|
    def pkg.prepare
        super
        isolate_errors do
            build
            progress_done
        end
    end

    def pkg.build
        in_dir (srcdir) do
            #message "Building PCI Express UART for the Trimble BD970 RTD PC-104 Module"
            #Autobuild::Subprocess.run(pkg, 'build', 'sudo make build', :working_directory => pkg.srcdir)
        end
    end
end

import_package 'drivers/pcan_pcie_mini' do |pkg|
    def pkg.prepare
        #message "Importing MINI PCI Express package"
        super
        isolate_errors do
            build
            progress_done
        end
    end

    def pkg.build
        in_dir (srcdir) do
            run("build", Autobuild.tool(:make), 'NET=NO')
        end
    end
    def pkg.install
        include_install_prefix = File.join(prefix, "include", name.split('/')[1])
        FileUtils.mkdir_p include_install_prefix

        FileUtils.install(File.join(srcdir, "lib","libpcan.h"), include_install_prefix)
        FileUtils.install(File.join(srcdir, "driver","pcan.h"), include_install_prefix)

        FileUtils.mkdir_p File.join(prefix, "lib")
        FileUtils.install(File.join(srcdir, "lib","libpcan.so"), File.join(prefix, "lib"))

        # For the ExoTeR rover with sudo rights
        in_dir (srcdir) do
            #run('install', 'sudo make install ')
            #run('install', 'sudo modprobe pcan')
        end
    end
end

bundle_package 'bundles/exoter'

